import telebot
from telebot import types
import random
import time
from telebot.types import InputMediaPhoto, InputMediaVideo


bot = telebot.TeleBot('6734100186:AAHydnwFQLNereoNh-8X-gMnxNqzeufRuwA')



card_images = {

   1: 'AgACAgIAAxkBAAICAAFmmmBalZSz3Lu7AAHxpZ8EMaeIZ70AAkvdMRuZRNFIZHVYSpjdDVgBAAMCAAN4AAM1BA',
   2: 'AgACAgIAAxkBAAICAWaaYFrD8TBxCkmDzPd_5DOZm74NAAJN3TEbmUTRSFNNPNCD6BqxAQADAgADeAADNQQ',
   3: 'AgACAgIAAxkBAAICA2aaYFr6nakjgOMOsa1FO5hhx1X7AAKm4jEbMyrRSI93dAuApg6yAQADAgADeAADNQQ',
   4: 'AgACAgIAAxkBAAICAmaaYFoEF2l-7yrIpEm0rArq_jivAAJS3TEbmUTRSNcjkQPFoh94AQADAgADeAADNQQ',
   5: 'AgACAgIAAxkBAAICBGaaYFqr4tLMXJGBoyURcgMJBliSAAKp4jEbMyrRSHVZSFnwsoxNAQADAgADeQADNQQ',
   6: 'AgACAgIAAxkBAAICBWaaYFo-RjNJLddoczAnRg8U1Op5AAKs4jEbMyrRSGBnFxCXkVPxAQADAgADeAADNQQ',
   7: 'AgACAgIAAxkBAAICDGaabMKdLaN-MwSFOj6XOBv9KrV7AALV4jEbMyrRSDaqyZWJ6jkYAQADAgADeAADNQQ',
   8: 'AgACAgIAAxkBAAICDWaabML-WmjRGwYj2kjeZ6W_XOGEAALW4jEbMyrRSE14ksZLkIHFAQADAgADeQADNQQ',
   9: 'AgACAgIAAxkBAAICDmaabMKvUqC0SP_AXCwfmmgKQ3rNAALZ4jEbMyrRSCbEjD-03NXgAQADAgADeQADNQQ',
   10: 'AgACAgIAAxkBAAICD2aabMIrZN-_1v4_5XuyH4AIFTQJAALc4jEbMyrRSBMYvEC_NJyTAQADAgADeQADNQQ',
   11: 'AgACAgIAAxkBAAICEGaabMJRqjA9rYUXaOZsrZj-IbZEAALf4jEbMyrRSNjbrpzuwOZ5AQADAgADeQADNQQ',
   12: 'AgACAgIAAxkBAAICF2aabUq6-WdnZPjnLF4RG45n2ovnAAL04jEbMyrRSJ6K5neVmInBAQADAgADeAADNQQ',
   13: 'AgACAgIAAxkBAAICFmaabUpYGa6zY9HDs5YTnuoAAcT9lgACWN0xG5lE0Uj5a4BkEuVO8AEAAwIAA3kAAzUE',
   14: 'AgACAgIAAxkBAAICGGaabUo_QhnRTxpP2xENg5X9df1JAAL14jEbMyrRSHpkkhvO8FAyAQADAgADeAADNQQ',
   15:'AgACAgIAAxkBAAICGWaabUp4xcN9kj8yH_-sqNtsw8G6AAL44jEbMyrRSK8Y8EmMNKrxAQADAgADeQADNQQ',
   16: 'AgACAgIAAxkBAAICGmaabUoMncFoB5SKsdAMlEw6W-XQAAL64jEbMyrRSJoNqMZ9ZDUDAQADAgADeAADNQQ',
   17: 'AgACAgIAAxkBAAICIGaabaekHzu3ryBL_dbFi-VQ4yd7AAJh4jEbvAixSILe_6PSdDDlAQADAgADeQADNQQ',
   18: 'AgACAgIAAxkBAAICIWaabae-0fgtZDbAWTp2UaxkbQ_LAAJr4jEbvAixSEkw9H14Z0NkAQADAgADeQADNQQ',
   19: 'AgACAgIAAxkBAAICImaabaecl_LWP-STt0I4c3-TlrdoAAJt4jEbvAixSDD75bfwK49nAQADAgADeAADNQQ',
   20: 'AgACAgIAAxkBAAICI2aabae0Ly8Cf04c9UasZdqUHD2EAAJx4jEbvAixSFhSe_zW_133AQADAgADeAADNQQ',
   21: 'AgACAgIAAxkBAAICJGaabac9U0VBu4lpxy3qi54DPo9iAAJz4jEbvAixSBDWAAG9gIGpnwEAAwIAA3gAAzUE',
   22: 'AgACAgIAAxkBAAICJWaabaetdJcuG2c_MAjrpkt0fDNBAAJg3TEbmUTRSBuM9V8AAdnKugEAAwIAA3kAAzUE',
   23: 'AgACAgIAAxkBAAICJ2aabaesr0iQeUalYc-4wzJvc3aLAAKB4jEbMyrRSJntGV_3eThDAQADAgADeQADNQQ',
   24: 'AgACAgIAAxkBAAICJmaabadNZIURnxUjp8W4LezSZdQAA3fiMRszKtFIQ7y6CP2m6H4BAAMCAAN5AAM1BA',
   25: 'AgACAgIAAxkBAAICKGaabae3j3ypZ4Hs5SV9pOfL4BrlAAKE4jEbMyrRSLENdEzUdhJnAQADAgADeQADNQQ',
   26: 'AgACAgIAAxkBAAICMmaablfcaZ5LyaFrvymbhpUrf-CYAAKq2jEbfnewSO6vXaS7sdj5AQADAgADeQADNQQ',
   27: 'AgACAgIAAxkBAAICM2aablebGhlO08O9sE7W5GlUDy-SAAKs2jEbfnewSF1UB0x6rD4kAQADAgADeAADNQQ',
   28: 'AgACAgIAAxkBAAICNGaablfYjoRqcDaFPNZIw9TmMm82AAKt2jEbfnewSH-fThyDifG2AQADAgADeQADNQQ',
   29: 'AgACAgIAAxkBAAICNWaablebeSRgMFEW-s6R21_pJg7pAAK62jEbfnewSEP0Ut9u3xZeAQADAgADeQADNQQ',
   30: 'AgACAgIAAxkBAAICNmaablfCJBuDniQEYgABQvm-xtf4RQACvdoxG353sEh_ZxAldFq_6gEAAwIAA3gAAzUE',
   31: 'AgACAgIAAxkBAAICN2aabldUDXALWTpXUS6xBMAvGnCIAAK_2jEbfnewSHUb9Xwo-I6BAQADAgADeQADNQQ',
   32: 'AgACAgIAAxkBAAICOGaabldPOLzsaV0jdlVH7QkGFDKQAAKL4jEbMyrRSD_pEpf7CaBiAQADAgADeQADNQQ',
   33: 'AgACAgIAAxkBAAICOWaablcTP_9dgnUxh1wBc_obY8VoAAK34jEbMyrRSFLUBc6WFP69AQADAgADeAADNQQ',
   34: 'AgACAgIAAxkBAAICO2aablfJufmKClQucA6R6ng3l-blAALK4jEbMyrRSC83IeVrKUTLAQADAgADeQADNQQ',
   35: 'AgACAgIAAxkBAAICOmaabldUB_Kp55ay8Nc1HRbnym2zAAK-4jEbMyrRSEMuz3hnpmK1AQADAgADeQADNQQ',
   36: 'AgACAgIAAxkBAAICPGaableO81phH-wF-gls2jPt_51sAAKW3TEbmUTRSGte-u-XdFZyAQADAgADbQADNQQ',
   37: 'AgACAgIAAxkBAAICPWaableseSv4cGYf8ISQ2H1NPqnAAALQ4jEbMyrRSH0nqJF11toPAQADAgADeAADNQQ'

    }
card_videos = {
   38: 'BAACAgIAAxkBAAICS2aab0jcvKgKfGD6DpAnQXSr-5JwAALPTgACfnewSKDvBSMg9NcjNQQ',
   39: 'BAACAgIAAxkBAAICSmaab0j_hEL8hJNLXc25yI_LZ0x2AAJjRwACMv2YSKQOK8Zqf_jVNQQ',
   40: 'BAACAgIAAxkBAAICTGaab0iZ_vUBLD1y-QABlvWQdGKzsAAC2U4AAn53sEgryh02JSxQvjUE',
   41: 'BAACAgIAAxkBAAICTWaab0ij_XNdhvhrbqFQzWb6ca8YAALdTgACfnewSMquSGgqmptANQQ',
   42: 'BAACAgIAAxkBAAICTmaab0htQmY_dg8LkDmdyt4oq1-vAALjTgACfnewSFJRteQK33x-NQQ',
   43: 'BAACAgIAAxkBAAICT2aab0gG9IDq5fwiUbeuFToWC7YGAALlTgACfnewSJoe4vfdiOPUNQQ',
   44: 'BAACAgIAAxkBAAICUGaab0jEmJCem4uZWW8Xb0YzxajLAAIsTwACmUTRSKT0bH9T7rleNQQ'
    }


card_texts = {
    1: "–ö–æ–∫–∏ –§—É—Ä–∏—Ö–∞—Ç–∞ \n –°—Ç–∞—Ç—ã:  \n –î—Ä–∏–±–ª–∏–Ω–≥:c \n –ë—Ä–æ—Å–æ–∫ :c \n –§–∏–∑.':c \n –í–µ–∑—É—á–µ—Å—Ç—å: b+ \n –ü–∞—Å:b+ \n –î–∞–Ω–∫:–Ω–µ—Ç—É \n –£–º(IQ):c+ \n –°–∫—Ä—ã—Ç–∞—è —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å: –ù–µ—Ç—É",
    2: "–•–∏—Ä–æ—à–∏ –§—É–∫—É–¥–∞ \n –°—Ç–∞—Ç—ã:  \n –î—Ä–∏–±–ª–∏–Ω–≥:b \n –ë—Ä–æ—Å–æ–∫ :c- \n –§–∏–∑.':c \n –í–µ–∑—É—á–µ—Å—Ç—å: s+ \n –ü–∞—Å:c \n –î–∞–Ω–∫:–Ω–µ—Ç—É \n –£–º(IQ):b+ \n –°–∫—Ä—ã—Ç–∞—è —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å: –ù–µ—Ç—É ",
    3: "–ö–æ–∏—á–∏ –ö–∞–≤–∞—Ö–∞—Ä–∞ \n –°—Ç–∞—Ç—ã:  \n –î—Ä–∏–±–ª–∏–Ω–≥:c \n –ë—Ä–æ—Å–æ–∫ :c \n –§–∏–∑.':b \n –í–µ–∑—É—á–µ—Å—Ç—å: a \n –ü–∞—Å:b\n –î–∞–Ω–∫:–Ω–µ—Ç—É \n –£–º(IQ):c \n –°–∫—Ä—ã—Ç–∞—è —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å: –ù–µ—Ç—É ",
    4: "–®–∏–Ω—Å–∫–µ –ö–∏–º—É—Ä–∞ \n –°—Ç–∞—Ç—ã:  \n –î—Ä–∏–±–ª–∏–Ω–≥:b \n –ë—Ä–æ—Å–æ–∫ :c- \n –§–∏–∑.':a \n –í–µ–∑—É—á–µ—Å—Ç—å: b \n –ü–∞—Å:c \n –î–∞–Ω–∫:b \n –£–º(IQ):b+ \n –°–∫—Ä—ã—Ç–∞—è —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å: –ù–µ—Ç—É ",
    5: "–ö–∏—ë—à–∏ –ú–∏—è–¥–∂–∏ \n –°—Ç–∞—Ç—ã:  \n –î—Ä–∏–±–ª–∏–Ω–≥:b \n –ë—Ä–æ—Å–æ–∫ :b \n –§–∏–∑.':c \n –í–µ–∑—É—á–µ—Å—Ç—å: s+ \n –ü–∞—Å:b \n –î–∞–Ω–∫:–Ω–µ—Ç—É \n –£–º(IQ):b+ \n –°–∫—Ä—ã—Ç–∞—è —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å: –ù–µ—Ç—É ",
    6: "–¢–∞–π—Å–∫–µ –û—Ü—É–±–æ \n –°—Ç–∞—Ç—ã:  \n –î—Ä–∏–±–ª–∏–Ω–≥:b \n –ë—Ä–æ—Å–æ–∫ :c- \n –§–∏–∑.':bb \n –í–µ–∑—É—á–µ—Å—Ç—å: s+ \n –ü–∞—Å:c \n –î–∞–Ω–∫:–Ω–µ—Ç—É \n –£–º(IQ):c \n –°–∫—Ä—ã—Ç–∞—è —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å: –ù–µ—Ç—É",
    7: "–õ—é –í—ç–π \n –°—Ç–∞—Ç—ã: \n –î—Ä–∏–±–ª–∏–Ω–≥:b  \n –ë—Ä–æ—Å–æ–∫ :b \n –§–∏–∑.':a \n –í–µ–∑—É—á–µ—Å—Ç—å: ss+ \n –ü–∞—Å:a-- \n –î–∞–Ω–∫:b+ \n –£–º(IQ):b+ \n –°–∫—Ä—ã—Ç–∞—è —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å: –ù–µ—Ç—É",
    8: "–ö–µ–Ω—ä–∏—á–∏ –û–∫–∞–º—É—Ä–∞ \n –°—Ç–∞—Ç—ã:  \n –î—Ä–∏–±–ª–∏–Ω–≥:a- \n –ë—Ä–æ—Å–æ–∫ :bb \n –§–∏–∑.':b+ \n –í–µ–∑—É—á–µ—Å—Ç—å:s \n –ü–∞—Å:b \n –î–∞–Ω–∫:b++ \n –£–º(IQ):c \n –°–∫—Ä—ã—Ç–∞—è —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å –ù–µ—Ç—É :",
    9: "–ö–µ–Ω—Å–∫–µ –§—É–∫—É–∏ \n –°—Ç–∞—Ç—ã:  \n –î—Ä–∏–±–ª–∏–Ω–≥:b \n –ë—Ä–æ—Å–æ–∫:b \n –§–∏–∑.':b \n –í–µ–∑—É—á–µ—Å—Ç—å: s \n –ü–∞—Å:b \n –î–∞–Ω–∫:c \n –£–º(IQ):a \n –°–∫—Ä—ã—Ç–∞—è —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å: –ù–µ—Ç—É",
    10: "–†—ë –°–∞–∫—É—Ä–∞–π \n –°—Ç–∞—Ç—ã:  \n –î—Ä–∏–±–ª–∏–Ω–≥:b \n –ë—Ä–æ—Å–æ–∫:a \n –§–∏–∑.':b \n –í–µ–∑—É—á–µ—Å—Ç—å: s \n –ü–∞—Å:b \n –î–∞–Ω–∫:c \n –£–º(IQ):b \n –°–∫—Ä—ã—Ç–∞—è —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å: –ù–µ—Ç—É",
    11: "–ö–æ—Å–∫–µ –í–∞–∫–∞–º–∞—Ü—É \n –°—Ç–∞—Ç—ã:  \n –î—Ä–∏–±–ª–∏–Ω–≥:a \n –ë—Ä–æ—Å–æ–∫:b \n –§–∏–∑.':b \n –í–µ–∑—É—á–µ—Å—Ç—å: s \n –ü–∞—Å:b \n –î–∞–Ω–∫:b \n –£–º(IQ):b \n –°–∫—Ä—ã—Ç–∞—è —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å: –ù–µ—Ç—É",
    12: "–°–∞—Ç–æ—à–∏ –¶—É—á–∏–¥–∞ \n –°—Ç–∞—Ç—ã:  \n –î—Ä–∏–±–ª–∏–Ω–≥:b \n –ë—Ä–æ—Å–æ–∫ :b \n –§–∏–∑.':a- \n –í–µ–∑—É—á–µ—Å—Ç—å: s+ \n –ü–∞—Å:d+ \n –î–∞–Ω–∫:b \n –£–º(IQ):a \n –°–∫—Ä—ã—Ç–∞—è —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å: –ù–µ—Ç—É",
    13: "–®–æ–≥–æ –•–∞–π–∑–∞–∫–∏ \n –°—Ç–∞—Ç—ã:  \n –î—Ä–∏–±–ª–∏–Ω–≥:b+ \n –ë—Ä–æ—Å–æ–∫:a \n –§–∏–∑.':b+ \n –í–µ–∑—É—á–µ—Å—Ç—å: s \n –ü–∞—Å:b \n –î–∞–Ω–∫:b \n –£–º(IQ):a- \n –°–∫—Ä—ã—Ç–∞—è —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å: \n –ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ",
    14: "–¢–∞—Ü—É—è –•–∏–º—É—Ä–æ \n –°—Ç–∞—Ç—ã: \n –î—Ä–∏–±–ª–∏–Ω–≥:a- \n –ë—Ä–æ—Å–æ–∫:a \n –§–∏–∑.':a- \n –í–µ–∑—É—á–µ—Å—Ç—å: s \n –ü–∞—Å:b \n –î–∞–Ω–∫:b \n –£–º(IQ):a \n –°–∫—Ä—ã—Ç–∞—è —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å: –ù–µ—Ç—É",
    15: "–Æ–∫–∏–æ –ö–∞—Å–∞–º–∞—Ü—É \n –°—Ç–∞—Ç—ã: \n –î—Ä–∏–±–ª–∏–Ω–≥:a- \n –ë—Ä–æ—Å–æ–∫:b+ \n –§–∏–∑.':a- \n –í–µ–∑—É—á–µ—Å—Ç—å: s \n –ü–∞—Å:a \n –î–∞–Ω–∫:a \n –£–º(IQ):b \n –°–∫—Ä—ã—Ç–∞—è —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å: –ù–µ—Ç—É",
    16: "–ú–∏—Ü—É—Ö–∏—Ä–æ –•–∞—è–∫–∞–≤–∞ \n –°—Ç–∞—Ç—ã:  \n –î—Ä–∏–±–ª–∏–Ω–≥:b+ \n –ë—Ä–æ—Å–æ–∫:a- \n –§–∏–∑.':a+ \n –í–µ–∑—É—á–µ—Å—Ç—å: s \n –ü–∞—Å:a \n –î–∞–Ω–∫:b \n –£–º(IQ):b \n –°–∫—Ä—ã—Ç–∞—è —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å: –ù–µ—Ç—É",
    17: "üëë–¢–µ–ø–ø–µ–π –∞—Ä–∏–∫—à–Ωüëë \n –°—Ç–∞—Ç—ã: \n –î—Ä–∏–±–ª–∏–Ω–≥:a+ \n –ë—Ä–æ—Å–æ–∫ :ss \n –§–∏–∑.':a+ \n –í–µ–∑—É—á–µ—Å—Ç—å:s \n –ü–∞—Å:ss+ \n –£–º(IQ):s+ \n –°–∫—Ä—ã—Ç–∞—è —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å: \n ü¶æ—Ä—É–∫–∏-–∫—Ä—é–∫–∏ü¶æ",
    18: "‚ò†–ú–∞–∫–æ—Ç–æ –¢—å–æ–º–∞‚ò† \n –°—Ç–∞—Ç—ã:  \n –î—Ä–∏–±–ª–∏–Ω–≥:a+ \n –ë—Ä–æ—Å–æ–∫ :a+ \n –§–∏–∑.':s+ \n –í–µ–∑—É—á–µ—Å—Ç—å: ss+ \n –ü–∞—Å:s+ \n –î–∞–Ω–∫:—Ö–∑ \n –£–º(IQ):x+ \n –°–∫—Ä—ã—Ç–∞—è —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å:  \n üï∏–ø–∞—É—Ç–∏–Ω–∞üï∏",
    19: "ü¶∂ –ü—è—Ç–∫–∞ –ù–µ–±—É—è ü¶∂ \n –°—Ç–∞—Ç—ã:  \n –î—Ä–∏–±–ª–∏–Ω–≥:s+ \n –ë—Ä–æ—Å–æ–∫ :s- \n –§–∏–∑.':x \n –í–µ–∑—É—á–µ—Å—Ç—å: a+ \n –ü–∞—Å:a+ \n –£–º(IQ):c \n –î–∞–Ω–∫:s+ \n –°–∫—Ä—ã—Ç–∞—è —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å:  \n üí™–ñ–æ—Å–∫–∏–µ –º—ã—à—Ç—Å—ãüí™",
    20: "üêí–†–µ–æ –±–∏–±–∏–∑—è–Ω—á–∏–∫üêí \n –°—Ç–∞—Ç—ã:  \n –î—Ä–∏–±–ª–∏–Ω–≥:a- \n –ë—Ä–æ—Å–æ–∫ :x \n –§–∏–∑.':s \n –í–µ–∑—É—á–µ—Å—Ç—å: s \n –ü–∞—Å:s+ \n –î–∞–Ω–∫:–Ω–µ—Ç \n –£–º(IQ):a- \n –°–∫—Ä—ã—Ç–∞—è —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å: \n üå§–ù–µ–±–µ—Å–∞üå§ \n üåè–∑–µ–º–ª—èüåè \n üåå–ø—É—Å—Ç–∞—Ç–∞üåå",
    21: "‚ö°Ô∏è–§–ª–µ–π–∑–µ—Ä –•–∞—è–º–∞‚ö°Ô∏è \n –°—Ç–∞—Ç—ã:  \n –î—Ä–∏–±–ª–∏–Ω–≥:x \n –ë—Ä–æ—Å–æ–∫ :a+ \n –§–∏–∑.':s \n –í–µ–∑—É—á–µ—Å—Ç—å: s+ \n –ü–∞—Å:s+ \n –î–∞–Ω–∫:—Ö–∑ \n –£–º(IQ):a \n –°–∫—Ä—ã—Ç–∞—è —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å:  \n ‚ö°Ô∏è–ú–æ–ª–Ω–∏–µ–Ω–æ—Å–Ω—ã–π –¥—Ä–∏–±–ª–∏–Ω–≥‚ö°Ô∏è",
    22: "–®–∏–Ω–¥–∂–∏ –ö–æ–≥–∞–Ω–µ–∏  \n –°—Ç–∞—Ç—ã:  \n –î—Ä–∏–±–ª–∏–Ω–≥:b+ \n –ë—Ä–æ—Å–æ–∫ :b \n –§–∏–∑.':A++ \n –í–µ–∑—É—á–µ—Å—Ç—å: s+ \n –ü–∞—Å:b+ \n –î–∞–Ω–∫:—Ö–∑ \n –£–º(IQ):a \n –°–∫—Ä—ã—Ç–∞—è —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å: –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –∏–≥—Ä–æ–∫",
    23: "–†–∏–Ω–Ω–æ—Å–∫–µ –ú–∏—Ç–æ–±–µ \n –°—Ç–∞—Ç—ã:  \n –î—Ä–∏–±–ª–∏–Ω–≥:b+ \n –ë—Ä–æ—Å–æ–∫ :a \n –§–∏–∑.':b \n –í–µ–∑—É—á–µ—Å—Ç—å: s+ \n –ü–∞—Å:a- \n –î–∞–Ω–∫:—Ö–∑ \n –£–º(IQ):a \n –°–∫—Ä—ã—Ç–∞—è —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å: \n –ë—Ä–æ—Å–æ–∫-–∫—Ä—é–∫ \n –ó–∞—â–∏—Ç–∞-–¥–∞–≤–ª–µ–Ω–∏–µ–º",
    24: "–®—É–Ω –ò–∑—É–∫–∏ \n –°—Ç–∞—Ç—ã:  \n –î—Ä–∏–±–ª–∏–Ω–≥:b \n –ë—Ä–æ—Å–æ–∫ :b \n –§–∏–∑.':b \n –í–µ–∑—É—á–µ—Å—Ç—å: s+ \n –ü–∞—Å:a \n –î–∞–Ω–∫:—Ö–∑ \n –£–º(IQ):a \n –°–∫—Ä—ã—Ç–∞—è —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å: \n –û—Ä–ª–∏–Ω—ã–π –≥–ª–∞–∑ ",
    25: "–î–∂—É–º–ø–µ–π –•—å—é–≥–∞ \n –°—Ç–∞—Ç—ã:  \n –î—Ä–∏–±–ª–∏–Ω–≥:b+ \n –ë—Ä–æ—Å–æ–∫ :a \n –§–∏–∑.':b \n –í–µ–∑—É—á–µ—Å—Ç—å: s+ \n –ü–∞—Å:a- \n –î–∞–Ω–∫:–Ω–µ—Ç—É \n –£–º(IQ):s+ \n –°–∫—Ä—ã—Ç–∞—è —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å: \n –§–æ—Ä–º–∞ –±—Ä–æ—Å–∫–∞ '–ó–µ–º–ª—è'(—Å–ø–∏–∑–¥–µ–ª —É –±–µ–±–µ–∑—è–Ω—á–µ–∫–∞) \n –ù–µ–ø—Ä–∏–∫–æ—Å–Ω–æ–≤–µ–Ω–Ω—ã–π –±—Ä–æ—Å–æ–∫ \n –î–∞–ª—å–Ω–∏–µ –±—Ä–æ—Å–∫–∏ ",
    26: "–ß–∏—Ç–æ—Ä –∞—É–º–µ–Ω–µ \n –°—Ç–∞—Ç—ã:  \n –î—Ä–∏–±–ª–∏–Ω–≥:xxx+ \n –ë—Ä–æ—Å–æ–∫ :sx \n –§–∏–∑.':ss+ \n –î–∞–Ω–∫:s+ \n –í–µ–∑—É—á–µ—Å—Ç—å:s+ \n –ü–∞—Å:–Ω–µ—Ç—ÉXDüòú \n –£–º(IQ):c+ \n –°–∫—Ä—ã—Ç–∞—è —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å:üòà–∂—ë—Å—Ç–∫–∏–π –¥—Ä–∏–±–ª–∏–Ω–≥üòà",
    27: "–ú—É—Ä–∞—Å–∞–∫–∏–±–∞—Ä–∞ –ø–µ–Ω–æ–∫–∏–æüá∞üá¨ \n –°—Ç–∞—Ç—ã:  \n –î—Ä–∏–±–ª–∏–Ω–≥:s \n –ë—Ä–æ—Å–æ–∫ :s \n –§–∏–∑.':sxx+ \n –í–µ–∑—É—á–µ—Å—Ç—å: a+ \n –ü–∞—Å:d+ \n –£–º(IQ):d+ \n –î–∞–Ω–∫:sss+ \n –°–∫—Ä—ã—Ç–∞—è —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å: ‚ö°Ô∏è–º–æ–ª–Ω–∏–µ–Ω–æ—Å–Ω–∞—è —Ä–µ–∞–∫—Ü–∏—è‚ö°Ô∏è",
    28: "üî´–ú–µ–¥–∞—Ä–∏–º–∞ –ø–∞–ø–∞–≥–µ—Ç–∞üî´ \n –°—Ç–∞—Ç—ã:  \n –î—Ä–∏–±–ª–∏–Ω–≥:s- \n –ë—Ä–æ—Å–æ–∫ :sxx+ \n –§–∏–∑.:ss- \n –î–∞–Ω–∫: –Ω–µ—Ç—É \n –í–µ–∑—É—á–µ—Å—Ç—å:ss \n –ü–∞—Å:a- \n –£–º(IQ):a \n –°–∫—Ä—ã—Ç–∞—è —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å:üçÉ100% –±—Ä–æ—Å–æ–∫üçÉ",
    29: "ü•µ–ê–∫–∞—à–∏ –ª–æ–ªü•µ \n –°—Ç–∞—Ç—ã:  \n –î—Ä–∏–±–ª–∏–Ω–≥:sxx+ \n –ë—Ä–æ—Å–æ–∫ :s \n –§–∏–∑.':ss \n –î–∞–Ω–∫: a+ \n –í–µ–∑—É—á–µ—Å—Ç—å:a- \n –ü–∞—Å:s+ \n –£–º(IQ):ss+ \n –°–∫—Ä—ã—Ç–∞—è —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å: üåπ–≥–ª–∞–∑  –∏–º–ø–µ—Ä–∞—Ç–æ—Ä–∞üåπ",
    30: "‚ú®–ö–∏—Å—ç –ª–µ–≤–∞‚ú® \n –°—Ç–∞—Ç—ã:  \n –î—Ä–∏–±–ª–∏–Ω–≥:ss \n –ë—Ä–æ—Å–æ–∫ :ss \n –§–∏–∑.':ss- \n –í–µ–∑—É—á–µ—Å—Ç—å:s \n –ü–∞—Å:s+ \n –£–º(IQ):a+ \n –°–∫—Ä—ã—Ç–∞—è —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å: ‚ú®–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ‚ú®",
    31: "‚ùÑÔ∏è–ï—Å—Å—ã—Ä –∫—É—Ä–æ–∫–æ‚ùÑÔ∏è \n –°—Ç–∞—Ç—ã:  \n –î—Ä–∏–±–ª–∏–Ω–≥:c \n –ë—Ä–æ—Å–æ–∫:a- \n –§–∏–∑.':d+ \n –î–∞–Ω–∫:–Ω–µ—Ç—É \n –í–µ–∑—É—á–µ—Å—Ç—å:ss \n –ü–∞—Å:xxx \n –£–º(IQ):c+ \n –°–∫—Ä—ã—Ç–∞—è —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å: üí®–ø—Ä–∏–∑—Ä–∞—á–Ω—ã–π  –∏–≥—Ä–æ–∫üí®",
    32: "üåá–ü–µ—Ä–µ–ø–µ–ø–µ–ø–µ–∫–∞–≥–∞–º–∏üåá \n –°—Ç–∞—Ç—ã:  \n –î—Ä–∏–±–ª–∏–Ω–≥:sx \n –ë—Ä–æ—Å–æ–∫ :a+ \n –§–∏–∑.':s++ \n –í–µ–∑—É—á–µ—Å—Ç—å: s+ \n –ü–∞—Å:s \n –î–∞–Ω–∫:sx \n –£–º(IQ):b \n –°–∫—Ä—ã—Ç–∞—è —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å: \n ü¶µ–°—É–ø–µ—Ä –ø—Ä—ã–∂–æ–∫ü¶µ",
    33: "–ù—ç—à –ì–æ–ª–¥-–º–ª–∞–¥—à–∏–π \n –°—Ç–∞—Ç—ã:  \n –î—Ä–∏–±–ª–∏–Ω–≥:ss+ \n –ë—Ä–æ—Å–æ–∫ :ss+ \n –§–∏–∑.':ss+ \n –í–µ–∑—É—á–µ—Å—Ç—å: ss+ \n –ü–∞—Å:ss+ \n –î–∞–Ω–∫:ss+ \n –£–º(IQ):ss+ \n –°–∫—Ä—ã—Ç–∞—è —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å: –ú–∞—Å–∫–∏—Ä–æ–≤–∫–∞ –¥–≤–∏–∂–µ–Ω–∏–π \n –ì–ª–∞–∑–∞ –î—å—è–≤–æ–ª–∞ \n –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –≤—ã–≤–µ—Ä–µ–Ω–Ω—ã–µ –¥–≤–∏–∂–µ–Ω–∏—è \n –ü—Ä–µ–≤–æ—Å—Ö–æ–¥–Ω—ã–µ –±–∞—Å–∫–µ—Ç–±–æ–ª—å–Ω—ã–µ –Ω–∞–≤—ã–∫–∏",
    34: "–î–∂–µ–π—Å–æ–Ω –°–∏–ª—å–≤–µ—Ä \n –°—Ç–∞—Ç—ã:  \n –î—Ä–∏–±–ª–∏–Ω–≥:ss+ \n –ë—Ä–æ—Å–æ–∫ :ss+ \n –§–∏–∑.':ss+ \n –í–µ–∑—É—á–µ—Å—Ç—å: ss+ \n –ü–∞—Å:ss+ \n –î–∞–Ω–∫:ss+ \n –£–º(IQ):a \n –°–∫—Ä—ã—Ç–∞—è —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å: –ñ–∏–≤–æ—Ç–Ω—ã–µ –∏–Ω—Å—Ç–∏–Ω–∫—Ç—ã",
    35: "–ù–∏–∫ \n –°—Ç–∞—Ç—ã:  \n –î—Ä–∏–±–ª–∏–Ω–≥:X+ \n –ë—Ä–æ—Å–æ–∫ :ss+ \n –§–∏–∑.':ss+ \n –í–µ–∑—É—á–µ—Å—Ç—å: ss+ \n –ü–∞—Å:ss+ \n –î–∞–Ω–∫:ss+ \n –£–º(IQ):ss+ \n –°–∫—Ä—ã—Ç–∞—è —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å: –ù–µ—Ç—É",
    36: "–ê–ª–ª–µ–Ω \n –°—Ç–∞—Ç—ã:  \n –î—Ä–∏–±–ª–∏–Ω–≥:ss+ \n –ë—Ä–æ—Å–æ–∫ :ss+ \n –§–∏–∑.':ss+ \n –í–µ–∑—É—á–µ—Å—Ç—å: ss+ \n –ü–∞—Å:ss+ \n –î–∞–Ω–∫:ss+ \n –£–º(IQ):ss+ \n –°–∫—Ä—ã—Ç–∞—è —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å: –ù–µ–ø—Ä–∏–∫–æ—Å–Ω–æ–≤–µ–Ω–Ω—ã–π –±—Ä–æ—Å–æ–∫",
    37: "–ó–∞–∫ \n –°—Ç–∞—Ç—ã:  \n –î—Ä–∏–±–ª–∏–Ω–≥:ss+ \n –ë—Ä–æ—Å–æ–∫ :ss+ \n –§–∏–∑.':x+ \n –í–µ–∑—É—á–µ—Å—Ç—å: ss+ \n –ü–∞—Å:ss+ \n –î–∞–Ω–∫:ss+ \n –£–º(IQ):ss+ \n –°–∫—Ä—ã—Ç–∞—è —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å: –î—å—è–≤–æ–ª—å—Å–∫–∞—è –≤—ã–Ω–æ—Å–ª–∏–≤–æ—Å—Ç—å ",
    38: "ü•µ–ê–∫–∞—à–∏ –ª–æ–ªü•µ \n –°—Ç–∞—Ç—ã:  \n –î—Ä–∏–±–ª–∏–Ω–≥:sxx+ \n –ë—Ä–æ—Å–æ–∫ :ss+ \n –§–∏–∑.':ssa+ \n –î–∞–Ω–∫: aa+ \n –í–µ–∑—É—á–µ—Å—Ç—å:s- \n –ü–∞—Å:ss+ \n –£–º(IQ):ssx \n –°–∫—Ä—ã—Ç–∞—è —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å: üåπ–≥–ª–∞–∑  –∏–º–ø–µ—Ä–∞—Ç–æ—Ä–∞üåπ \n –≤ –ø–æ—Ç–æ–∫–µ: üòà–Ω–æ –∫–∞–ª–µ–Ω–µüòà",
    39: "üî´–ú–µ–¥–∞—Ä–∏–º–∞ –ø–∞–ø–∞–≥–µ—Ç–∞üî´ \n –°—Ç–∞—Ç—ã:  \n –î—Ä–∏–±–ª–∏–Ω–≥:ss+ \n –ë—Ä–æ—Å–æ–∫ :xxx+ \n –§–∏–∑.':sss- \n –î–∞–Ω–∫: –Ω–µ—Ç—É \n –í–µ–∑—É—á–µ—Å—Ç—å:ss \n –ü–∞—Å:s+ \n –£–º(IQ):s \n –°–∫—Ä—ã—Ç–∞—è —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å:üçÉ100% –±—Ä–æ—Å–æ–∫üçÉ \n –í –ø–æ—Ç–æ–∫–µ: üå™–±—ã—Å—Ç—Ä—ã–π –±—Ä–æ—Å–æ–∫üå™",
    40: "üí§–ß–∏—Ç–æ—Ä –∞—É–º–µ–Ω–µüí§ \n –°—Ç–∞—Ç—ã: \n –î—Ä–∏–±–ª–∏–Ω–≥:xxx+ \n –ë—Ä–æ—Å–æ–∫ :sx \n –§–∏–∑.':sx+ \n –î–∞–Ω–∫:x+ \n –í–µ–∑—É—á–µ—Å—Ç—å:s+ \n –ü–∞—Å:–Ω–µ—Ç—ÉXDüòú \n –£–º(IQ):a+ \n –°–∫—Ä—ã—Ç–∞—è —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å:üòà–∂—ë—Å—Ç–∫–∏–π –¥—Ä–∏–±–ª–∏–Ω–≥üòà \n  –≤ –ø–æ—Ç–æ–∫–µ: –¥—Ä–∏–±–ª–∏–Ω–≥ —É—Å–∏–ª–∏–≤–∞–µ—Ç—Å—è –≤ –¥–≤–∞ —Ä–∞–∑–∞",
    41: "‚ú®–ö–∏—Å—ç –ª–µ–≤–∞‚ú® \n –°—Ç–∞—Ç—ã:  \n –î—Ä–∏–±–ª–∏–Ω–≥:ssa+ \n –ë—Ä–æ—Å–æ–∫ :ssa+ \n –§–∏–∑.':ss+ \n –í–µ–∑—É—á–µ—Å—Ç—å:s \n –ü–∞—Å:ss+ \n –£–º(IQ):s \n –°–∫—Ä—ã—Ç–∞—è —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å: \n ‚ú®–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ‚ú® \n –≤ –ø–∞—Ç–æ–∫–µ:üí´–∞–±—Å–æ–ª—é—Ç–Ω–æ–µ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µüí´",
    42: "‚ùÑÔ∏è–ï—Å—Å—ã—Ä –∫—É—Ä–æ–∫–æ‚ùÑÔ∏è  \n –°—Ç–∞—Ç—ã:  \n –î—Ä–∏–±–ª–∏–Ω–≥:a \n –ë—Ä–æ—Å–æ–∫:s- \n –§–∏–∑.':a- \n –î–∞–Ω–∫:–Ω–µ—Ç—É \n –í–µ–∑—É—á–µ—Å—Ç—å:ss+ \n –ü–∞—Å:xxx+ \n –£–º(IQ):s+ \n –°–∫—Ä—ã—Ç–∞—è —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å:üí®–ø—Ä–∏–∑—Ä–∞—á–Ω—ã–π  –∏–≥—Ä–æ–∫üí® \n –≤ –ø–æ—Ç–æ–∫–µ: ü´•–ê–±—Å–æ–ª—é—Ç–Ω–∞—è –Ω–µ–≤–∏–¥–∏–º–æ—Å—Ç—åü´•",
    43: "–ú—É—Ä–∞—Å–∞–∫–∏–±–∞—Ä–∞ –ø–µ–Ω–æ–∫–∏–æüá∞üá¨  \n –°—Ç–∞—Ç—ã:  \n –î—Ä–∏–±–ª–∏–Ω–≥:s+ \n –ë—Ä–æ—Å–æ–∫ :ss \n –§–∏–∑.':xxx+ \n –í–µ–∑—É—á–µ—Å—Ç—å: a+ \n –ü–∞—Å:d+ \n –î–∞–Ω–∫:ssx+ \n –£–º(IQ):a \n –°–∫—Ä—ã—Ç–∞—è —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å: ‚ö°Ô∏è–º–æ–ª–Ω–∏–µ–Ω–æ—Å–Ω–∞—è —Ä–µ–∞–∫—Ü–∏—è‚ö°Ô∏è \n –≤ –ø–æ—Ç–æ–∫–µ: —Å–∫—Ä—ã—Ç–∞—è —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å —É—Å–∏–ª–∏–≤–∞–µ—Ç—Å—è –≤ –¥–≤–∞ —Ä–∞–∑–∞",
    44: "üåá–ü–µ—Ä–µ–ø–µ–ø–µ–ø–µ–∫–∞–≥–∞–º–∏üåá \n –°—Ç–∞—Ç—ã:  \n –î—Ä–∏–±–ª–∏–Ω–≥:x+ \n –ë—Ä–æ—Å–æ–∫ :a++ \n –§–∏–∑.':x \n –í–µ–∑—É—á–µ—Å—Ç—å: ss \n –ü–∞—Å:s+ \n –î–∞–Ω–∫:x+ \n –£–º(IQ):a \n –°–∫—Ä—ã—Ç–∞—è —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å: –°—É–ø–µ—Ä –ø—Ä—ã–∂–æ–∫ \n –í –ø–æ—Ç–æ–∫–µ: ‚òÑ –º–µ—Ç–µ–æ—Ä–∏—Ç–Ω—ã–π –¥–∞–Ω–∫‚òÑ",

}

START_IMAGE_FILE_ID = "AgACAgIAAxkBAAIIWmaiyreMQgxWEhX3TAUG0cpIsk5cAAJA4TEbPzehSO1QkhnygGBwAQADAgADeQADNQQ"


user_data = {}
number_data=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43,44]


# –•—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
user_data = {}

@bot.message_handler(commands=['start'])
def send_welcome(message):
    user_id = message.from_user.id
    if user_id in user_data:
        bot.send_message(message.chat.id, "–í—ã —É–∂–µ –∑–∞–ø–æ–ª–Ω–∏–ª–∏ —Å–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å, –µ—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –µ–≥–æ, —Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ '–ò–∑–º–µ–Ω–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å'")
    else:
        markup = types.InlineKeyboardMarkup()
        reg_button = types.InlineKeyboardButton("–ü—Ä–∞–π–¥–µ —Ä–µ–≥–µ—Å—Ç—Ä–∞—Ü–∏—é", callback_data="register")
        markup.add(reg_button)
        bot.send_photo(message.chat.id, START_IMAGE_FILE_ID, caption="–ú—ã –∞–±—Å–æ–ª—é—Ç—ã", reply_markup=markup)
@bot.callback_query_handler(func=lambda call: call.data == "register")
def handle_register(call):
    user_id = call.from_user.id
    if user_id in user_data:
        bot.send_message(call.message.chat.id, "–í—ã —É–∂–µ –∑–∞–ø–æ–ª–Ω–∏–ª–∏ —Å–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å, –µ—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –µ–≥–æ, —Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ '–ò–∑–º–µ–Ω–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å'")
    else:
        bot.send_message(call.message.chat.id, "–ù–∞–ø–µ—à–∏ —Å–≤–∞–π –Ω–∏–∫")
        bot.register_next_step_handler(call.message, get_nickname)

def get_nickname(message):
    user_id = message.from_user.id
    user_data[user_id] = {'nickname': message.text}
    bot.send_message(message.chat.id, "–¢–µ–ø–µ—Ä –ø—Ä–µ—à–ª–∏ —Ñ–æ—Ç–æ, –∫–∞—Ç–∞—Ä–æ–µ —Ö–æ—á–µ—à —É–≤–µ–¥–µ—Ç—å —É —Å–∏–ø—è –Ω–∞ –∞–≤–µ")
    bot.register_next_step_handler(message, get_photo)

def get_photo(message):
    user_id = message.from_user.id
    if message.content_type == 'photo':
        user_data[user_id]['photo'] = message.photo[-1].file_id
        markup = types.InlineKeyboardMarkup()
        card_button = types.InlineKeyboardButton("–ü–æ–ª—É—á–∏—Ç—å –∫–∞—Ä—Ç—É", callback_data="get_card")
        markup.add(card_button)
        bot.send_message(message.chat.id, "–†–µ–≥–µ—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–æ", reply_markup=markup)
    else:
        bot.send_message(message.chat.id, "–ø—Ä–∏—à–ª–∏ —Ñ–æ—Ç–æ –∏–ø–∞—Å–æ—Å")
        bot.register_next_step_handler(message, get_photo)

@bot.message_handler(func=lambda message: message.text.lower() == '–º–æ–π –ø—Ä–æ—Ñ–∏–ª—å')
def show_profile(message):
    user_id = message.from_user.id
    if user_id in user_data:
        nickname = user_data[user_id]['nickname']
        photo_id = user_data[user_id].get('photo')
        profile_text = f"–Ω–∏–∫: *{nickname}*"
        if photo_id:
            bot.send_photo(message.chat.id, photo_id, caption=profile_text, parse_mode='Markdown')
        else:
            bot.send_message(message.chat.id, profile_text)
    else:
        bot.send_message(message.chat.id, "–°–Ω–∞—á–∞–ª–∞ –ø—Ä–∞–π–¥—ç —Ä–µ–≥–µ—Å—Ç—Ä–∞—Ü–∏—é —Ç–∞–ª–ø–∞–π–æ–ø")

@bot.message_handler(func=lambda message: message.text.lower() == '–∏–∑–º–µ–Ω–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å')
def change_profile(message):
    user_id = message.from_user.id
    if user_id in user_data:
        bot.send_message(message.chat.id, "–ù–∞–ø–µ—à–µ —Å–≤–∞–π –Ω–∏–∫")
        bot.register_next_step_handler(message, update_nickname)
    else:
        bot.send_message(message.chat.id, "–°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–π–¥–∏—Ç–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é.")

def update_nickname(message):
    user_id = message.from_user.id
    user_data[user_id]['nickname'] = message.text
    bot.send_message(message.chat.id, "–¢–µ–ø–µ—Ä –ø—Ä–µ—à–ª–∏ —Ñ–æ—Ç–æ, –∫–∞—Ç–∞—Ä–æ–µ —Ö–æ—á–µ—à —É–≤–µ–¥–µ—Ç—å —É —Å–∏–ø—è –Ω–∞ –∞–≤–µ")
    bot.register_next_step_handler(message, update_photo)

def update_photo(message):
    user_id = message.from_user.id
    if message.content_type == 'photo':
        user_data[user_id]['photo'] = message.photo[-1].file_id
        bot.send_message(message.chat.id, "–ü—Ä–æ—Ñ–µ–ª—å –æ–±–Ω–æ–≤–ª–µ–Ω")
    else:
        bot.send_message(message.chat.id, "–ø—Ä–∏—à–ª–∏ —Ñ–æ—Ç–æ –∏–ø–∞—Å–æ—Å")
        bot.register_next_step_handler(message, update_photo)

@bot.message_handler(func=lambda message: message.text.lower() == '–º–µ–Ω—é')
def show_menu(message):
    user_id = message.from_user.id
    if user_id not in user_data:
        bot.send_message(message.chat.id, "–°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–π–¥–∏—Ç–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é.")
        return

    profile_data = user_data[user_id]
    nickname = profile_data['nickname']
    photo_id = profile_data.get('photo')

    profile_text = f"–ù–∏–∫: *{nickname}*\n–í—Å–µ–ª–µ–Ω–Ω–∞—è: –ø–æ–∫–æ–ª–µ–Ω–∏–µ —á—É—Ä–æ–∫"

    if photo_id:
        bot.send_photo(message.chat.id, photo_id, caption=profile_text, parse_mode='Markdown')
    else:
        bot.send_message(message.chat.id, profile_text)

@bot.message_handler(func=lambda message: message.text.startswith('+–Ω–∏–∫ '))
def change_nickname(message):
    user_id = message.from_user.id
    new_nickname = message.text.split('+–Ω–∏–∫ ', 1)[1].strip()

    if user_id in user_data:
        user_data[user_id]['nickname'] = new_nickname
        bot.send_message(message.chat.id, f"—Ç–≤–∞–π –Ω–∏–∫  –∏–∑–º–µ–Ω–æ–Ω –Ω–∞ '*{new_nickname}*'")
    else:
        bot.send_message(message.chat.id, "–°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–π–¥–∏—Ç–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é.")



def get_photo(message):
    user_id = message.from_user.id
    if message.content_type == 'photo':
        user_data[user_id]['photo'] = message.photo[-1].file_id
        markup = types.InlineKeyboardMarkup()
        card_button = types.InlineKeyboardButton("–ü–æ–ª—É—á–∏—Ç—å –∫–∞—Ä—Ç—É", callback_data="get_card")
        markup.add(card_button)
        bot.send_message(message.chat.id, "–†–µ–≥–µ—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–æ", reply_markup=markup)
    else:
        bot.send_message(message.chat.id, "–ø—Ä–∏—à–ª–∏ —Ñ–æ—Ç–æ –∏–ø–∞—Å–æ—Å")
        bot.register_next_step_handler(message, get_photo)








# –ù–æ–≤—ã–π —Å–ª–æ–≤–∞—Ä—å –¥–ª—è —ç–¥–∏—Ç–æ–≤ (–∑–∞–º–µ–Ω–∏—Ç–µ VIDEO_FILE_ID_X –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–µ file_id)
edit_videos = [
    "BAACAgIAAxkBAAIH3Gaii81achJZtSKkTZHL6VEAAXf4BgACx00AAkx6EEnITEFR_WpKnjUE",
    "BAACAgIAAxkBAAIH22aii8245z7Z0lgF5ggogcIL3rPIAALGTQACTHoQSRDPpdWzS6t2NQQ",
    "BAACAgIAAxkBAAIH3Waii838MAIzjVPRb0O7Ch4Z4-avAALJTQACTHoQSa7qCPJMQF3xNQQ",
    "BAACAgIAAxkBAAIH3maii80Jy7l79aUq_t7PZb2DFVB9AALKTQACTHoQSdVQzC9ikSb1NQQ",
    "BAACAgIAAxkBAAIH32aii82RURqFEfiNIsbK1EQpBXR2AALMTQACTHoQSQICe1B2dn_oNQQ",
    "BAACAgIAAxkBAAIH4Gaii82XoIhyC4_FBpTagPJbVsH-AALPTQACTHoQSfdTGgHe4AhANQQ",
    "BAACAgIAAxkBAAIH4Waii829Ps0KZ-7Al75saDpcMNjOAALQTQACTHoQSWWXFnv3f03fNQQ",
    "BAACAgIAAxkBAAIH4maii80qhhHDlMAeEGgAAbWuL8NKmQAC0U0AAkx6EElMfq64NkvPtjUE",
    "BAACAgIAAxkBAAIH42aii81FKwEKpdcla7z-1FJt0f30AALTTQACTHoQScxWaGtkMCWRNQQ",
    "BAACAgIAAxkBAAIH5Gaii80uPWIIj1sDsN727BcvocOvAALUTQACTHoQSaOx5dImdBj0NQQ",
    "BAACAgIAAxkBAAIH5Waii82iguw6uDiKyGupHBOnKMKoAALVTQACTHoQSa7H9IskLEybNQQ",
    "BAACAgIAAxkBAAIH5maii81UmlhxxQS7um7h722D2XlTAALYTQACTHoQSVv6V72NN8_ONQQ",
    "BAACAgIAAxkBAAIH52aii82rUO0LdNMnIS0kNejc_YkfAALZTQACTHoQSVDV3cL8AAFQxDUE",
    "BAACAgIAAxkBAAIH6Gaii82PhUMp6PlxdhpS8YOa8fbYAALbTQACTHoQSS8iFyBJWNj_NQQ",
    "BAACAgIAAxkBAAIH6Waii81lWQ8xXAh0R0FCQyVQ2-UEAALcTQACTHoQSfh3d0HgarVGNQQ",
    "BAACAgIAAxkBAAIH6maii81mAXzGLuILU-hRCZiYjoh1AALfTQACTHoQSeHBcZ_sZNKCNQQ",
    "BAACAgIAAxkBAAIH62aii82c7681nDmZZHZvdUnsiyNaAALgTQACTHoQST-ADmaZAAFFGzUE",
    "BAACAgIAAxkBAAIH7Gaii819pVHS18SC0301m45bQqeVAALiTQACTHoQSSd0qi8I_kIDNQQ",
    "BAACAgIAAxkBAAIH7Waii81gbvZ_lvN8zfKBrgunJ7Q-AALlTQACTHoQSbA_mzSooZRpNQQ",
    "BAACAgIAAxkBAAIH7maii82qauZoVz5gopmujd6SkGcwAAIOUQACTHoQSeWFJBTT_Uk8NQQ",
    "BAACAgIAAxkBAAIH72aii81y2sG6YJ1q-HRV_e_2SRdhAAIPUQACTHoQSW_WsKHDmAeHNQQ",
    "BAACAgIAAxkBAAIH8Gaii80hPB9dcXgaK5tPas5vbSYoAAIQUQACTHoQSSyuVXAPWiC6NQQ",
    "BAACAgIAAxkBAAIH8Waii83k6BtoRQEu2bCd0dyVKH_mAAIRUQACTHoQSYRV7dnVsH75NQQ",
    "BAACAgIAAxkBAAIH8maii80anljd58vmvE4VPqHB9Dt3AAISUQACTHoQSQOOs8htidihNQQ",
    "BAACAgIAAxkBAAIH82aii81cONOQG0WBVHsn91HijhayAAITUQACTHoQSVk-OwI_wSfPNQQ",
    "BAACAgIAAxkBAAIH9Gaii80t1LUu-mFe7387CboCKJTiAAIVUQACTHoQSbBZ9WaDuFfgNQQ",
    "BAACAgIAAxkBAAIH9Waii80B0f4yAvv7RqbCmJG6UjzgAAIWUQACTHoQSTf-xm5SGYaaNQQ",
    "BAACAgIAAxkBAAIH9maii82am_H5uiYBaDpxp7364khgAAIXUQACTHoQScOKDOYtqfUPNQQ",
    "BAACAgIAAxkBAAIH92aii82AzRWllz4AARefZZYhrtKvvgACGFEAAkx6EEl0gm-vrmvktTUE",
    "BAACAgIAAxkBAAIH-Gaii81tUVhbo2w5FJjH1SacNMTqAAIaUQACTHoQSWsqQ-R0NdyuNQQ",
    "BAACAgIAAxkBAAIH-Waii81givvszOpxqZmnHSAxTzauAAIbUQACTHoQSaeiFPODa1UhNQQ",
    "BAACAgIAAxkBAAIH-maii81InnEXke1SNkbDo4t2ZqJyAAIfUQACTHoQSX0yfYTqQY04NQQ",
    "BAACAgIAAxkBAAIH-2aii82TgLkpGYXtPAVJRDXh2eZkAAIjUQACTHoQSbIUvtQdNwIzNQQ",
    "BAACAgIAAxkBAAIH_Gaii80dM0MChJhLileq8ILuiSOSAAIkUQACTHoQSbnr5Ew568l_NQQ",
    "BAACAgIAAxkBAAIH_Waii80POn63eFLpxJFl5DhlTizUAAIlUQACTHoQSb1w7bz-G5A3NQQ",
    "BAACAgIAAxkBAAIH_maii82PPWN8-z_RKNkH0jBK-pgFAAJ5UQACTHoQSUqk4IETtsdTNQQ",
    "BAACAgIAAxkBAAIH_2aii808vCKgYTl9mWiqSi3BxQsBAAJ7UQACTHoQSRIM-6SjiDYBNQQ",
    "BAACAgIAAxkBAAIIAAFmoovNaTSU-f1ABa0klZFEh7eMiwACfFEAAkx6EEnCn7Id4XK6qjUE",
    "BAACAgIAAxkBAAIIAWaii82eBTKJxrAi1fxMS1YL5FukAAJ-UQACTHoQSaLJncGDTlEMNQQ",
    "BAACAgIAAxkBAAIIAmaii83PGyO9jCcIwAq8z1gpizeVAAJ_UQACTHoQSQTf0WTgXsPENQQ",
    "BAACAgIAAxkBAAIIA2aii83L9CDrfqDuuvsxwjr4zzUZAAKBUQACTHoQSSkvPeoEXUz-NQQ",
    "BAACAgIAAxkBAAIIBGaii81MwFbvhDVG6XnAQ_QVMrf2AAKCUQACTHoQSVTpEch6jyk3NQQ",
    "BAACAgIAAxkBAAIIBWaii80YwisyzhRiw0UprgsN5G3uAAKDUQACTHoQSTVyN8oWm4UtNQQ",
    "BAACAgIAAxkBAAIIBmaii81daatFKKgAAXzsczzqu4Pk5QAChlEAAkx6EElN2EDbkndT8zUE",
    "BAACAgIAAxkBAAIIB2aii82fmpIAAaDj83LwTgygS4pHCgACh1EAAkx6EEk195AM3dfyqjUE",
    "BAACAgIAAxkBAAIICGaii800Ao5vCF3WG8Mg23-z1R_cAAKJUQACTHoQST2RfkNhNi_7NQQ",
    "BAACAgIAAxkBAAIICWaii80SORB2d13oKoiHhGyWkFc4AAKMUQACTHoQSR2HIEXX3xiPNQQ",
    "BAACAgIAAxkBAAIICmaii82N2WmHMENkL25w2UUxm5HvAAKNUQACTHoQScM3tB12av-INQQ",
    "BAACAgIAAxkBAAIIC2aii80BjY2-45RyBCEZPYr73BLzAAKOUQACTHoQSdrt-LovlZT2NQQ",
    "BAACAgIAAxkBAAIIDGaii80i87xT5gbnP_2C_P-BSrsGAAKRUQACTHoQSQfrHX8g3wGONQQ",
    "BAACAgIAAxkBAAIIDWaii80d-XlneJhsMDluwl830iNAAAKVUQACTHoQSXh8fiBGA60PNQQ",
    "BAACAgIAAxkBAAIIDmaii80yRBYVT1zyEP3OqD9kTMS9AAKXUQACTHoQSeC9gYCyEucSNQQ",
    "BAACAgIAAxkBAAIID2aii80yBzOcMO2SdCsLLMfoDY_tAAKiUQACTHoQSUzHz4OIfWnhNQQ",
    "BAACAgIAAxkBAAIIEGaii82_qfL-BizP73U7s_yny6jwAAKkUQACTHoQSagbBhtxW_mxNQQ",
    "BAACAgIAAxkBAAIIR2aijAasV7Sr_G3wXSemFuspaGJcAAK-VwACWTjJSPVM3UXuxd0GNQQ",
    "BAACAgIAAxkBAAIISWaijD-5aiHoRmadvfdZtVQjy51iAAKcYAACPzeZSIPWuVaVCAxDNQQ",
    "BAACAgIAAxkBAAIIS2aijJrEcq1ykbtT3j6Cag7bB1bCAAJjUwACxfqQSMOL_enKTlp-NQQ",
    "BAACAgIAAxkBAAIITWaijQjdDlqxaLzc1l8kE2reGsUHAAIyWgACikAZSYradfhcNQTBNQQ"
    "BAACAgIAAxkBAAIIbWai1Xtf7eQi6WMFPv31wBp-a4oJAALjTQACM3YYScXyEePoYYy0NQQ"
    "BAACAgIAAxkBAAIIbmai1XtjBfp3o7bUfEZVhfTtzilqAAIDTgACM3YYSZaEUDyitktnNQQ"
  ]


@bot.message_handler(func=lambda message: message.text.lower() == "—ç–¥–∏—Ç")
def send_random_edit(message):
    random_video = random.choice(edit_videos)  # –í—ã–±–æ—Ä —Å–ª—É—á–∞–π–Ω–æ–≥–æ –≤–∏–¥–µ–æ
    bot.send_video(message.chat.id, random_video, caption="–†–∞–Ω–¥–∞–º–Ω–∏–π —ç–¥–∏—Ç")




"""

# –û–ø—Ä–µ–¥–µ–ª—è–µ–º –≤–µ—Å–∞ –¥–ª—è –∫–∞–∂–¥–æ–π –≥—Ä—É–ø–ø—ã
weights = [
    (1, 6, 10),  # –ß–∏—Å–ª–∞ –æ—Ç 1 –¥–æ 6, 10 —Ä–∞–∑
    (7, 11, 5),  # –ß–∏—Å–ª–∞ –æ—Ç 7 –¥–æ 11, 5 —Ä–∞–∑
    (12, 16, 3),  # –ß–∏—Å–ª–∞ –æ—Ç 12 –¥–æ 16, 3 —Ä–∞–∑–∞
    (17, 25, 2),  # –ß–∏—Å–ª–∞ –æ—Ç 17 –¥–æ 25, 2 —Ä–∞–∑–∞
    (26, 37, 1),  # –ß–∏—Å–ª–∞ –æ—Ç 26 –¥–æ 37, 1 —Ä–∞–∑
    (38, 44, 0.5)  # –ß–∏—Å–ª–∞ –æ—Ç 38 –¥–æ 44, 0.5 —Ä–∞–∑–∞
]

# –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–∞—Ä—Ç —Å —É—á–µ—Ç–æ–º –≤–µ—Å–æ–≤
weighted_numbers = []
for start, end, count in weights:
    for num in range(start, end + 1):
        weighted_numbers.extend([num] * int(count * 10))

# –£–Ω–∏–∫–∞–ª—å–Ω—ã–µ —á–∏—Å–ª–æ–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è —Å —É—á–µ—Ç–æ–º –≤–µ—Å–æ–≤
unique_weighted_numbers = list(set(weighted_numbers))

# –•—Ä–∞–Ω–µ–Ω–∏–µ –ø–æ–ª—É—á–µ–Ω–Ω—ã—Ö –∫–∞—Ä—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
user_received_cards = {}
user_last_draw_time = {}  # –í—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–∞—Ä—Ç
user_cards_indices = {}  # –ò–Ω–¥–µ–∫—Å—ã –∫–∞—Ä—Ç –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
msg_id_storage = {}  # –•—Ä–∞–Ω–µ–Ω–∏–µ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä–æ–≤ —Å–æ–æ–±—â–µ–Ω–∏–π

# –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —É—Ä–æ–≤–Ω–µ–π
level_ranges = {
    "level_1_6": (1, 6),
    "level_7_11": (7, 11),
    "level_12_16": (12, 16),
    "level_17_25": (17, 25),
    "level_26_37": (26, 37),
    "level_38_44": (38, 44),
}


@bot.message_handler(func=lambda message: message.text.lower() == "–º–æ–∏ –∫–∞—Ä—Ç—ã")
def choose_numbers(message):
    markup = types.InlineKeyboardMarkup()  # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —É—Ä–æ–≤–Ω—è —Å–ª–æ–∂–Ω–æ—Å—Ç–∏
    difficulty_buttons = [
        ("üü§—Ö—É–π–Ω—èüü§", "level_1_6"),
        ("‚ö™Ô∏è–æ–±—ã—á–Ω—ã–π‚ö™Ô∏è", "level_7_11"),
        ("üü¢—Ä–µ–¥–∫–∏üü¢", "level_12_16"),
        ("üü†–º–∏—Ñ–∏—á–µ—Å–∫–∏üü†", "level_17_25"),
        ("üü°–ª–µ–≥–µ–Ω–¥–∞—Ä–Ω—ã–πüü°", "level_26_37"),
        ("üü£–±–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–πüü£", "level_38_44"),
        ("–í—Å–µ –∫–∞—Ä—Ç—ã", "all_cards")  # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–í—Å–µ –∫–∞—Ä—Ç—ã"
    ]

    user_id = message.from_user.id
    for label, level_key in difficulty_buttons:
        button = types.InlineKeyboardButton(label, callback_data=level_key)
        markup.add(button)

    bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ —É—Ä–æ–≤–µ–Ω—å —Å–ª–æ–∂–Ω–æ—Å—Ç–∏:", reply_markup=markup)


@bot.callback_query_handler(func=lambda call: call.data in level_ranges)
def handle_level_selection(call):
    user_id = call.from_user.id
    level = level_ranges[call.data]

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –µ—Å–ª–∏ –æ–Ω–∏ –µ—â–µ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É—é—Ç
    if user_id not in user_received_cards:
        user_received_cards[user_id] = []  # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º, –µ—Å–ª–∏ –µ—â–µ –Ω–µ –±—ã–ª–æ –ø–æ–ª—É—á–µ–Ω–Ω—ã—Ö –∫–∞—Ä—Ç

    if user_id not in user_cards_indices:
        user_cards_indices[user_id] = {}

    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–±–∏—Ä–∞–µ—Ç –Ω–æ–≤—ã–π —É—Ä–æ–≤–µ–Ω—å, —Å–±—Ä–∞—Å—ã–≤–∞–µ–º –∏–Ω–¥–µ–∫—Å
    if call.data not in user_cards_indices[user_id]:
        user_cards_indices[user_id][call.data] = 0

    current_index = user_cards_indices[user_id][call.data]

    # –ü–æ–ª—É—á–∞–µ–º —á–∏—Å–ª–∞ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —É—Ä–æ–≤–Ω—è
    numbers = [num for num in unique_weighted_numbers if level[0] <= num <= level[1]]

    # –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–∞—Ä—Ç—ã, –∫–æ—Ç–æ—Ä—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ–±—Ä–∞–ª
    available_cards = [num for num in numbers if num in user_received_cards[user_id]]

    if current_index < len(available_cards):
        num = available_cards[current_index]
        user_cards_indices[user_id][call.data] += 1  # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –∏–Ω–¥–µ–∫—Å –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞

        image_id = card_images.get(num)
        video_id = card_videos.get(num)

        if image_id:
            card_text = card_texts.get(num, f"–ö–∞—Ä—Ç–∞: {num}")
            media = types.InputMediaPhoto(image_id, caption=card_text)
        elif video_id:
            card_text = card_texts.get(num, f"–ö–∞—Ä—Ç–∞: {num}")
            media = types.InputMediaVideo(video_id, caption=card_text)
        else:
            bot.send_message(call.message.chat.id, "–ö–∞—Ä—Ç–∏–Ω–∫–∞ –∏–ª–∏ –≤–∏–¥–µ–æ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")
            return

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ç–µ–∫—É—â–µ–π –∫–∞—Ä—Ç–æ–π –∏ –∫–Ω–æ–ø–∫–æ–π "–î–∞–ª—å—à–µ"
        markup = types.InlineKeyboardMarkup().add(
            types.InlineKeyboardButton("–î–∞–ª—å—à–µ", callback_data=call.data)
        )

        if current_index == 0:  # –ï—Å–ª–∏ —ç—Ç–æ –ø–µ—Ä–≤–∞—è –∫–∞—Ä—Ç–∞, —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            msg = bot.send_media_group(call.message.chat.id, [media])[0]
            msg_id = msg_id_storage.get(user_id)
            if msg_id:
                bot.edit_message_media(media, chat_id=call.message.chat.id, message_id=msg_id)
                bot.edit_message_reply_markup(chat_id=call.message.chat.id, message_id=msg_id, reply_markup=markup)
            else:
                bot.send_message(call.message.chat.id, "—Ö–∞ –ª–∞—à–∞—Ä–∞ —É —Ç–µ–±—è –∑–∞–∫–æ–Ω—á–µ–ª–µ—Å –∫–∞—Ä—Ç—ã –∏–ª–∏ –∏—â–æ –Ω–µ—Ç—É —Ç–∞–∫–∏—Ö –∫–∞—Ä—Ç")

            @bot.callback_query_handler(func=lambda call: call.data == "all_cards")
            def handle_all_cards(call):
                user_id = call.from_user.id
                total_cards = 44  # –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–∞—Ä—Ç
                collected_cards = len(user_received_cards.get(user_id, []))  # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–±—Ä–∞–Ω–Ω—ã—Ö –∫–∞—Ä—Ç
                bot.send_message(call.message.chat.id,
                                 f"–û–±—â–∏–µ –∫–∞–ª–∏—á–∏—Å—Ç–≤–∞ —Å–∞–±—Ä–∞–Ω–Ω—ã—Ö –∫–∞—Ä—Ç: {collected_cards}/{total_cards}")

            @bot.message_handler(func=lambda message: message.text.lower() == "–ø–æ–ª—É—á–∏—Ç—å –∫–∞—Ä—Ç—É")
            def get_card_manual(message):
                user_id = message.from_user.id
                # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –µ—Å–ª–∏ –µ—â–µ –Ω–µ –±—ã–ª–æ
                if user_id not in user_received_cards:
                    user_received_cards[user_id] = []  # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º, –µ—Å–ª–∏ –µ—â–µ –Ω–µ –±—ã–ª–æ –ø–æ–ª—É—á–µ–Ω–Ω—ã—Ö –∫–∞—Ä—Ç
                user_last_draw_time[user_id] = int(time.time())  # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –≤—Ä–µ–º—è

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å–∫–æ–ª—å–∫–æ –∫–∞—Ä—Ç —É–∂–µ –ø–æ–ª—É—á–µ–Ω–æ
                if len(user_received_cards[user_id]) < 2:
                    # –í—ã–±–æ—Ä –æ–¥–Ω–æ–π —Å–ª—É—á–∞–π–Ω–æ–π –∫–∞—Ä—Ç—ã
                    card_number = random.choice(weighted_numbers)  # –í—ã–±–∏—Ä–∞–µ–º –æ–¥–Ω—É –∫–∞—Ä—Ç—É
                    user_received_cards[user_id].append(card_number)  # –î–æ–±–∞–≤–ª—è–µ–º –∫–∞—Ä—Ç—É –≤ —Å–ø–∏—Å–æ–∫ –ø–æ–ª—É—á–µ–Ω–Ω—ã—Ö
                    user_last_draw_time[user_id] = int(time.time())  # –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫–∞—Ä—Ç—ã

                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞—Ä—Ç—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
                    if card_number in card_images:
                        card_text = card_texts.get(card_number, f"–í–∞—à–∞ –∫–∞—Ä—Ç–∞: {card_number}")
                        bot.send_photo(message.chat.id, card_images[card_number], caption=card_text)
                    elif card_number in card_videos:
                        card_text = card_texts.get(card_number, f"–í–∞—à–∞ –∫–∞—Ä—Ç–∞: {card_number}")
                        bot.send_video(message.chat.id, card_videos[card_number], caption=card_text)
                    else:
                        bot.send_message(message.chat.id, f"–í–∞—à–∞ –∫–∞—Ä—Ç–∞: {card_number}")
                else:
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø—Ä–æ—à–ª–æ –ª–∏ 1 —á–∞—Å —Å –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –ø–æ–ª—É—á–µ–Ω–∏—è
                    current_time = int(time.time())
                    elapsed_time = current_time - user_last_draw_time[user_id]
                    if elapsed_time >= 3600:  # 3600 —Å–µ–∫—É–Ω–¥ = 1 —á–∞—Å (–≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è)
                        bot.send_message(message.chat.id,
                                         "–í—ã –º–æ–∂–µ—Ç–µ –ø–æ–ª—É—á–∏—Ç—å –Ω–æ–≤—ã–µ –∫–∞—Ä—Ç—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É '–ø–æ–ª—É—á–∏—Ç—å –∫–∞—Ä—Ç—É' —Å–Ω–æ–≤–∞.")
                    else:
                        remaining_time = 3600 - elapsed_time
                        minutes = remaining_time // 60
                        seconds = remaining_time % 60
                        bot.send_message(message.chat.id,
                                         f"–í–µ—Ä–Ω–µ—Å —á–µ—Ä–µ–∑ {minutes} –º–µ–Ω—É—Ç –∏ {seconds} —Å–∏–∫—É–Ω—Ç, —á—Ç–∞–±—ã –ø–∞–ª—É—á–∏—Ç –Ω–∞–≤—ã–µ –∫–∞—Ä—Ç—ã")
"""
"""
# –û–ø—Ä–µ–¥–µ–ª—è–µ–º –≤–µ—Å–∞ –¥–ª—è –∫–∞–∂–¥–æ–π –≥—Ä—É–ø–ø—ã
weights = [
    (1, 6, 10),
    (7, 11, 5),
    (12, 16, 3),
    (17, 25, 2),
    (26, 37, 1),
    (38, 44, 0.5)
]

# –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –Ω–æ–º–µ—Ä–æ–≤ –∫–∞—Ä—Ç —Å —É—á–µ—Ç–æ–º –≤–µ—Å–æ–≤
weighted_numbers = []
for start, end, count in weights:
    for num in range(start, end + 1):
        weighted_numbers.extend([num] * int(count * 10))

# –£–Ω–∏–∫–∞–ª—å–Ω—ã–µ —á–∏—Å–ª–æ–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è —Å —É—á–µ—Ç–æ–º –≤–µ—Å–æ–≤
unique_weighted_numbers = list(set(weighted_numbers))
random.shuffle(unique_weighted_numbers)  # –ü–µ—Ä–µ–º–µ—à–∏–≤–∞–Ω–∏–µ –¥–ª—è —Å–ª—É—á–∞–π–Ω–æ–≥–æ –ø–æ—Ä—è–¥–∫–∞

# –•—Ä–∞–Ω–µ–Ω–∏–µ –ø–æ–ª—É—á–µ–Ω–Ω—ã—Ö –∫–∞—Ä—Ç –∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
user_received_cards = {}
user_last_draw_time = {}
user_cards_indices = {}

# –í—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –º–µ–∂–¥—É –ø–æ–ª—É—á–µ–Ω–∏—è–º–∏ –∫–∞—Ä—Ç (–≤ —Å–µ–∫—É–Ω–¥–∞—Ö)
TIME_LIMIT = 3600  # 1 —á–∞—Å
CARDS_PER_HOUR = 2

@bot.message_handler(func=lambda message: message.text.lower() == "–ø–æ–ª—É—á–∏—Ç—å –∫–∞—Ä—Ç—É")
def get_card(message):
    user_id = message.from_user.id
    current_time = time.time()

    if user_id not in user_last_draw_time:
        user_last_draw_time[user_id] = 0
        user_received_cards[user_id] = []

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å–∫–æ–ª—å–∫–æ –∫–∞—Ä—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –ø–æ–ª—É—á–∏–ª –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π —á–∞—Å
    time_since_last_draw = current_time - user_last_draw_time[user_id]
    if len(user_received_cards[user_id]) >= CARDS_PER_HOUR and time_since_last_draw < TIME_LIMIT:
        remaining_time = TIME_LIMIT - time_since_last_draw
        minutes, seconds = divmod(remaining_time, 60)
        bot.send_message(message.chat.id, f"–í–µ—Ä–Ω–∏—Å—å —á–µ—Ä–µ–∑ {int(minutes)} –º–∏–Ω—É—Ç –∏ {int(seconds)} —Å–µ–∫—É–Ω–¥, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –Ω–æ–≤—ã–µ –∫–∞—Ä—Ç–æ—á–∫–∏.")
        return

    # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –Ω–æ–º–µ—Ä–∞ –∫–∞—Ä—Ç–æ—á–∫–∏
    chosen_card_idx = random.choice(unique_weighted_numbers)

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–∞—Ä—Ç–æ—á–∫–∞ –µ—Å—Ç—å –≤ —Å–ª–æ–≤–∞—Ä—è—Ö
    if chosen_card_idx in card_images:
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–ª—É—á–µ–Ω–Ω—É—é –∫–∞—Ä—Ç—É
        user_received_cards[user_id].append(chosen_card_idx)
        user_last_draw_time[user_id] = current_time

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞—Ä—Ç–∏–Ω–∫—É
        bot.send_photo(message.chat.id, card_images[chosen_card_idx], caption=card_texts[chosen_card_idx])
    elif chosen_card_idx in card_videos:
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–ª—É—á–µ–Ω–Ω—É—é –∫–∞—Ä—Ç—É
        user_received_cards[user_id].append(chosen_card_idx)
        user_last_draw_time[user_id] = current_time

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤–∏–¥–µ–æ
        bot.send_video(message.chat.id, card_videos[chosen_card_idx], caption=card_texts.get(chosen_card_idx, ""))
    else:
        bot.send_message(message.chat.id, "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∫–∞—Ä—Ç–æ—á–∫—É. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")

@bot.message_handler(func=lambda message: message.text.lower() == "–º–æ–∏ –∫–∞—Ä—Ç—ã")
def choose_numbers(message):
    markup = types.InlineKeyboardMarkup()
    difficulty_buttons = [
        ("üü§—Ö—É–π–Ω—èüü§", "level_1_6"),
        ("‚ö™Ô∏è–æ–±—ã—á–Ω—ã–π‚ö™Ô∏è", "level_7_11"),
        ("üü¢—Ä–µ–¥–∫–∏üü¢", "level_12_16"),
        ("üü†–º–∏—Ñ–∏—á–µ—Å–∫–∏üü†", "level_17_25"),
        ("üü°–ª–µ–≥–µ–Ω–¥–∞—Ä–Ω—ã–πüü°", "level_26_37"),
        ("üü£–±–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–πüü£", "level_38_44"),
        ("–í—Å–µ –∫–∞—Ä—Ç—ã", "all_cards")
    ]

    for label, level_key in difficulty_buttons:
        button = types.InlineKeyboardButton(label, callback_data=level_key)
        markup.add(button)

    bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ —É—Ä–æ–≤–µ–Ω—å —Å–ª–æ–∂–Ω–æ—Å—Ç–∏:", reply_markup=markup)

@bot.callback_query_handler(func=lambda call: True)
def handle_card_level(call):
    user_id = call.from_user.id
    level_key = call.data
    level_ranges = {
        "level_1_6": (1, 6),
        "level_7_11": (7, 11),
        "level_12_16": (12, 16),
        "level_17_25": (17, 25),
        "level_26_37": (26, 37),
        "level_38_44": (38, 44),
    }

    if user_id not in user_cards_indices:
        user_cards_indices[user_id] = {k: 0 for k in level_ranges.keys()}

    if level_key in level_ranges:
        start, end = level_ranges[level_key]
        available_cards = [num for num in range(start, end + 1) if num in unique_weighted_numbers]

        # –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ –∏–Ω–¥–µ–∫—Å–∞ –∫–∞—Ä—Ç—ã –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        current_index = user_cards_indices[user_id][level_key]

        if current_index < len(available_cards):
            chosen_card_idx = available_cards[current_index]

            # –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ –≤—ã–±—Ä–∞–Ω–Ω–∞—è –∫–∞—Ä—Ç–æ—á–∫–∞ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ —Å–ª–æ–≤–∞—Ä—è—Ö
            if chosen_card_idx in card_images:
                # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –º–µ–¥–∏–∞ –∏ —Ç–µ–∫—Å—Ç–æ–º
                bot.edit_message_media(
                    media=types.InputMediaPhoto(card_images[chosen_card_idx], caption=card_texts[chosen_card_idx]),
                    chat_id=call.message.chat.id,
                    message_id=call.message.message_id
                )
            elif chosen_card_idx in card_videos:
                # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –≤–∏–¥–µ–æ
                bot.edit_message_media(
                    media=types.InputMediaVideo(card_videos[chosen_card_idx], caption=card_texts.get(chosen_card_idx, "")),
                    chat_id=call.message.chat.id,
                    message_id=call.message.message_id
                )

            # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º –∏–Ω–¥–µ–∫—Å –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–π –∫–∞—Ä—Ç—ã
            user_cards_indices[user_id][level_key] += 1
        else:
            bot.send_message(call.message.chat.id, "–ö–∞—Ä—Ç—ã —ç—Ç–æ–≥–æ —É—Ä–æ–≤–Ω—è –∑–∞–∫–æ–Ω—á–µ–Ω—ã.")
            return  # –û—Ç–º–µ–Ω–∞, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –æ—à–∏–±–∫–∏ –¥–∞–ª—å–Ω–µ–π—à–µ–≥–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è

    # –ö–Ω–æ–ø–∫–∞ "–î–∞–ª—å—à–µ" –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
    next_button = types.InlineKeyboardButton("–î–∞–ª—å—à–µ", callback_data=level_key)
    markup = types.InlineKeyboardMarkup()
    markup.add(next_button)
    bot.send_message(call.message.chat.id, "–ù–∞–∂–º–∏—Ç–µ '–î–∞–ª—å—à–µ', —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å —Å–ª–µ–¥—É—é—â—É—é –∫–∞—Ä—Ç—É", reply_markup=markup)
"""

# –û–ø—Ä–µ–¥–µ–ª—è–µ–º –≤–µ—Å–∞ –¥–ª—è –∫–∞–∂–¥–æ–π –≥—Ä—É–ø–ø—ã
weights = [
    (1, 6, 10),  # –ß–∏—Å–ª–∞ –æ—Ç 1 –¥–æ 6, 10 —Ä–∞–∑
    (7, 11, 5),  # –ß–∏—Å–ª–∞ –æ—Ç 7 –¥–æ 11, 5 —Ä–∞–∑
    (12, 16, 3),  # –ß–∏—Å–ª–∞ –æ—Ç 12 –¥–æ 16, 3 —Ä–∞–∑–∞
    (17, 25, 2),  # –ß–∏—Å–ª–∞ –æ—Ç 17 –¥–æ 25, 2 —Ä–∞–∑–∞
    (26, 37, 1),  # –ß–∏—Å–ª–∞ –æ—Ç 26 –¥–æ 37, 1 —Ä–∞–∑
    (38, 44, 0.5)  # –ß–∏—Å–ª–∞ –æ—Ç 38 –¥–æ 44, 0.5 —Ä–∞–∑–∞
]

# –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–∞—Ä—Ç —Å —É—á–µ—Ç–æ–º –≤–µ—Å–æ–≤
weighted_numbers = []
for start, end, count in weights:
    for num in range(start, end + 1):
        weighted_numbers.extend([num] * int(count * 10))

# –£–Ω–∏–∫–∞–ª—å–Ω—ã–µ —á–∏—Å–ª–æ–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è —Å —É—á–µ—Ç–æ–º –≤–µ—Å–æ–≤
unique_weighted_numbers = list(set(weighted_numbers))

# –•—Ä–∞–Ω–µ–Ω–∏–µ –ø–æ–ª—É—á–µ–Ω–Ω—ã—Ö –∫–∞—Ä—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
user_received_cards = {}
user_last_draw_time = {}  # –í—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–∞—Ä—Ç
user_cards_indices = {}  # –ò–Ω–¥–µ–∫—Å—ã –∫–∞—Ä—Ç –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
msg_id_storage = {}  # –•—Ä–∞–Ω–µ–Ω–∏–µ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä–æ–≤ —Å–æ–æ–±—â–µ–Ω–∏–π

# –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —É—Ä–æ–≤–Ω–µ–π
level_ranges = {
    "level_1_6": (1, 6),
    "level_7_11": (7, 11),
    "level_12_16": (12, 16),
    "level_17_25": (17, 25),
    "level_26_37": (26, 37),
    "level_38_44": (38, 44),
}



@bot.message_handler(func=lambda message: message.text.lower() == "–º–æ–∏ –∫–∞—Ä—Ç—ã")
def choose_numbers(message):
    markup = types.InlineKeyboardMarkup()  # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —É—Ä–æ–≤–Ω—è —Å–ª–æ–∂–Ω–æ—Å—Ç–∏
    difficulty_buttons = [
        ("üü§—Ö—É–π–Ω—èüü§", "level_1_6"),
        ("‚ö™Ô∏è–æ–±—ã—á–Ω—ã–π‚ö™Ô∏è", "level_7_11"),
        ("üü¢—Ä–µ–¥–∫–∏üü¢", "level_12_16"),
        ("üü†–º–∏—Ñ–∏—á–µ—Å–∫–∏üü†", "level_17_25"),
        ("üü°–ª–µ–≥–µ–Ω–¥–∞—Ä–Ω—ã–πüü°", "level_26_37"),
        ("üü£–±–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–πüü£", "level_38_44"),
        ("–í—Å–µ –∫–∞—Ä—Ç—ã", "all_cards")  # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–í—Å–µ –∫–∞—Ä—Ç—ã"
    ]
    user_id = message.from_user.id
    for label, level_key in difficulty_buttons:
        button = types.InlineKeyboardButton(label, callback_data=level_key)
        markup.add(button)
    bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ —É—Ä–æ–≤–µ–Ω—å —Å–ª–æ–∂–Ω–æ—Å—Ç–∏:", reply_markup=markup)

@bot.callback_query_handler(func=lambda call: call.data in level_ranges)
def handle_level_selection(call):
    user_id = call.from_user.id
    level = level_ranges[call.data]

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –µ—Å–ª–∏ –æ–Ω–∏ –µ—â–µ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É—é—Ç
    if user_id not in user_received_cards:
        user_received_cards[user_id] = []
    if user_id not in user_cards_indices:
        user_cards_indices[user_id] = {}

    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–±–∏—Ä–∞–µ—Ç –Ω–æ–≤—ã–π —É—Ä–æ–≤–µ–Ω—å, —Å–±—Ä–∞—Å—ã–≤–∞–µ–º –∏–Ω–¥–µ–∫—Å
    if call.data not in user_cards_indices[user_id]:
        user_cards_indices[user_id][call.data] = 0

    current_index = user_cards_indices[user_id][call.data]

    # –ü–æ–ª—É—á–∞–µ–º —á–∏—Å–ª–∞ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —É—Ä–æ–≤–Ω—è
    numbers = [num for num in unique_weighted_numbers if level[0] <= num <= level[1]]

    # –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–∞—Ä—Ç—ã, –∫–æ—Ç–æ—Ä—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ–±—Ä–∞–ª
    available_cards = [num for num in numbers if num in user_received_cards[user_id]]

    if current_index < len(available_cards):  # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∫–∞—Ä—Ç—ã
        num = available_cards[current_index]
        user_cards_indices[user_id][call.data] += 1  # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –∏–Ω–¥–µ–∫—Å –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞

        image_id = card_images.get(num)
        video_id = card_videos.get(num)

        media = None  # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é media
        if image_id:
            card_text = card_texts.get(num, f"–ö–∞—Ä—Ç–∞: {num}")
            media = types.InputMediaPhoto(image_id, caption=card_text)
        elif video_id:
            card_text = card_texts.get(num, f"–ö–∞—Ä—Ç–∞: {num}")
            media = types.InputMediaVideo(video_id, caption=card_text)

        if media:  # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ media –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ç–µ–∫—É—â–µ–π –∫–∞—Ä—Ç–æ–π –∏ –∫–Ω–æ–ø–∫–æ–π "–î–∞–ª—å—à–µ"
            markup = types.InlineKeyboardMarkup().add(
                types.InlineKeyboardButton("–î–∞–ª—å—à–µ", callback_data=call.data)
            )

            if current_index == 0:  # –ï—Å–ª–∏ —ç—Ç–æ –ø–µ—Ä–≤–∞—è –∫–∞—Ä—Ç–∞, —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                msg = bot.send_media_group(call.message.chat.id, [media])[0]
                msg_id_storage[user_id] = msg.message_id  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —Å–æ–æ–±—â–µ–Ω–∏—è
                bot.edit_message_reply_markup(chat_id=call.message.chat.id, message_id=msg.message_id, reply_markup=markup)
            else:  # –ï—Å–ª–∏ –∂–µ –∫–∞—Ä—Ç–∞ –Ω–µ –ø–µ—Ä–≤–∞—è, –æ–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                msg_id = msg_id_storage.get(user_id)
                bot.edit_message_media(media, chat_id=call.message.chat.id, message_id=msg_id)
                bot.edit_message_reply_markup(chat_id=call.message.chat.id, message_id=msg_id, reply_markup=markup)
        else:
            bot.send_message(call.message.chat.id, "–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–ª–∏ –≤–∏–¥–µ–æ –¥–ª—è –¥–∞–Ω–Ω–æ–π –∫–∞—Ä—Ç—ã.")
    else:
        bot.send_message(call.message.chat.id, "—Ö–∞ –ª–∞—à–∞—Ä–∞ —É —Ç–µ–±—è –∑–∞–∫–æ–Ω—á–µ–ª–∏—Å—å –∫–∞—Ä—Ç—ã –∏–ª–∏ –µ—â—ë –Ω–µ—Ç—É —Ç–∞–∫–∏—Ö –∫–∞—Ä—Ç.")

@bot.callback_query_handler(func=lambda call: call.data == "all_cards")
def handle_all_cards(call):
    user_id = call.from_user.id
    total_cards = 44  # –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–∞—Ä—Ç
    collected_cards = len(user_received_cards.get(user_id, []))  # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–±—Ä–∞–Ω–Ω—ã—Ö –∫–∞—Ä—Ç
    bot.send_message(call.message.chat.id, f"–û–±—â–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Å–æ–±—Ä–∞–Ω–Ω—ã—Ö –∫–∞—Ä—Ç: {collected_cards}/{total_cards}")

@bot.message_handler(func=lambda message: message.text.lower() == "–ø–æ–ª—É—á–∏—Ç—å –∫–∞—Ä—Ç—É")
def get_card_manual(message):
    user_id = message.from_user.id
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –µ—Å–ª–∏ –µ—â–µ –Ω–µ –±—ã–ª–æ
    if user_id not in user_received_cards:
        user_received_cards[user_id] = []
        user_last_draw_time[user_id] = int(time.time())  # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –≤—Ä–µ–º—è

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å–∫–æ–ª—å–∫–æ –∫–∞—Ä—Ç —É–∂–µ –ø–æ–ª—É—á–µ–Ω–æ
    if len(user_received_cards[user_id]) < 2:
        # –í—ã–±–æ—Ä –æ–¥–Ω–æ–π —Å–ª—É—á–∞–π–Ω–æ–π –∫–∞—Ä—Ç—ã
        card_number = random.choice(weighted_numbers)  # –í—ã–±–∏—Ä–∞–µ–º –æ–¥–Ω—É –∫–∞—Ä—Ç—É
        user_received_cards[user_id].append(card_number)  # –î–æ–±–∞–≤–ª—è–µ–º –∫–∞—Ä—Ç—É –≤ —Å–ø–∏—Å–æ–∫ –ø–æ–ª—É—á–µ–Ω–Ω—ã—Ö
        user_last_draw_time[user_id] = int(time.time())  # –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫–∞—Ä—Ç—ã

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞—Ä—Ç—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        if card_number in card_images:
            card_text = card_texts.get(card_number, f"–í–∞—à–∞ –∫–∞—Ä—Ç–∞: {card_number}")
            bot.send_photo(message.chat.id, card_images[card_number], caption=card_text)
        elif card_number in card_videos:
            card_text = card_texts.get(card_number, f"–í–∞—à–∞ –∫–∞—Ä—Ç–∞: {card_number}")
            bot.send_video(message.chat.id, card_videos[card_number], caption=card_text)
        else:
            bot.send_message(message.chat.id, f"–í–∞—à–∞ –∫–∞—Ä—Ç–∞: {card_number}")
    else:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø—Ä–æ—à–ª–æ –ª–∏ 1 —á–∞—Å —Å –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –ø–æ–ª—É—á–µ–Ω–∏—è
        current_time = int(time.time())
        elapsed_time = current_time - user_last_draw_time[user_id]
        if elapsed_time >= 3600:  # 3600 —Å–µ–∫—É–Ω–¥ = 1 —á–∞—Å (–≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è)
            bot.send_message(message.chat.id, "–í—ã –º–æ–∂–µ—Ç–µ –ø–æ–ª—É—á–∏—Ç—å –Ω–æ–≤—ã–µ –∫–∞—Ä—Ç—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É '–ø–æ–ª—É—á–∏—Ç—å –∫–∞—Ä—Ç—É' —Å–Ω–æ–≤–∞.")
        else:
            remaining_time = 3600 - elapsed_time
            minutes = remaining_time // 60
            seconds = remaining_time % 60
            bot.send_message(message.chat.id, f"–í–µ—Ä–Ω—É—Å—å —á–µ—Ä–µ–∑ {minutes} –º–∏–Ω—É—Ç –∏ {seconds} —Å–µ–∫—É–Ω–¥, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –Ω–æ–≤—ã–µ –∫–∞—Ä—Ç—ã.")





bot.polling()

